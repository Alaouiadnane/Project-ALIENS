{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Projet BUFFA\\\\project\\\\src\\\\components\\\\Listetemoignages.js\";\nimport React from 'react';\nimport MaterialTable from \"material-table\";\nimport Paper from \"@material-ui/core/Paper\"; //foor the icons\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport classes from '*.module.css';\n\nclass Listemoignages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.useStyles = makeStyles({\n      root: {\n        width: '100%'\n      },\n      container: {\n        maxHeight: 440\n      }\n    });\n    this.columns = [{\n      id: 'name',\n      label: 'Name',\n      minWidth: 170\n    }, {\n      id: 'code',\n      label: 'ISO\\u00a0Code',\n      minWidth: 100\n    }, {\n      id: 'population',\n      label: 'Population',\n      minWidth: 170,\n      align: 'right',\n      format: value => value.toLocaleString()\n    }, {\n      id: 'size',\n      label: 'Size\\u00a0(km\\u00b2)',\n      minWidth: 170,\n      align: 'right',\n      format: value => value.toLocaleString()\n    }, {\n      id: 'density',\n      label: 'Density',\n      minWidth: 170,\n      align: 'right',\n      format: value => value.toFixed(2)\n    }];\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.idcas);\n    fetch(\"/Listetemoignages/id_cas=\" + this.props.idcas).then(response => {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        data: data\n      });\n      console.log(\"ss\");\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Paper, {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableContainer, {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      stickyHeader: true,\n      \"aria-label\": \"sticky table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n      key: column.id,\n      align: column.align,\n      style: {\n        minWidth: column.minWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 23\n      }\n    }, column.label)))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n      return /*#__PURE__*/React.createElement(TableRow, {\n        hover: true,\n        role: \"checkbox\",\n        tabIndex: -1,\n        key: row.code,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 23\n        }\n      }, columns.map(column => {\n        const value = row[column.id];\n        return /*#__PURE__*/React.createElement(TableCell, {\n          key: column.id,\n          align: column.align,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }\n        }, column.format && typeof value === 'number' ? column.format(value) : value);\n      }));\n    })))), /*#__PURE__*/React.createElement(TablePagination, {\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      count: rows.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Listemoignages;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Projet BUFFA/project/src/components/Listetemoignages.js"],"names":["React","MaterialTable","Paper","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","classes","Listemoignages","Component","constructor","props","useStyles","root","width","container","maxHeight","columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","state","data","componentDidMount","console","log","idcas","fetch","then","response","json","setState","render","map","column","rows","slice","page","rowsPerPage","row","code","length","handleChangePage","handleChangeRowsPerPage"],"mappings":"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","sourcesContent":["    import React from 'react';\r\n    import MaterialTable from \"material-table\";\r\n    import Paper from \"@material-ui/core/Paper\";\r\n    //foor the icons\r\n    import { makeStyles } from '@material-ui/core/styles';\r\n   \r\n    import Table from '@material-ui/core/Table';\r\n    import TableBody from '@material-ui/core/TableBody';\r\n    import TableCell from '@material-ui/core/TableCell';\r\n    import TableContainer from '@material-ui/core/TableContainer';\r\n    import TableHead from '@material-ui/core/TableHead';\r\n    import TablePagination from '@material-ui/core/TablePagination';\r\n    import TableRow from '@material-ui/core/TableRow';\r\nimport classes from '*.module.css';\r\n\r\n\r\nclass Listemoignages extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n            console.log(this.props.idcas)\r\n            fetch(\"/Listetemoignages/id_cas=\"+ this.props.idcas)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then((data) => { \r\n            this.setState({\r\n                data:data})\r\n            console.log(\"ss\")   \r\n        })\r\n    \r\n    }\r\n\r\n     useStyles = makeStyles({\r\n        root: {\r\n          width: '100%',\r\n        },\r\n        container: {\r\n          maxHeight: 440,\r\n        },\r\n      });\r\n     columns = [\r\n        { id: 'name', label: 'Name', minWidth: 170 },\r\n        { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\r\n        {\r\n          id: 'population',\r\n          label: 'Population',\r\n          minWidth: 170,\r\n          align: 'right',\r\n          format: (value) => value.toLocaleString(),\r\n        },\r\n        {\r\n          id: 'size',\r\n          label: 'Size\\u00a0(km\\u00b2)',\r\n          minWidth: 170,\r\n          align: 'right',\r\n          format: (value) => value.toLocaleString(),\r\n        },\r\n        {\r\n          id: 'density',\r\n          label: 'Density',\r\n          minWidth: 170,\r\n          align: 'right',\r\n          format: (value) => value.toFixed(2),\r\n        },\r\n      ];\r\n      render(){\r\n        return (\r\n          <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.align}\r\n                        style={{ minWidth: column.minWidth }}\r\n                      >\r\n                        {column.label}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    return (\r\n                      <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id} align={column.align}>\r\n                              {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 25, 100]}\r\n              component=\"div\"\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        );\r\n                }\r\n}\r\nexport default Listemoignages;"]},"metadata":{},"sourceType":"module"}